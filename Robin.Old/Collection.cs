//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Robin.Core
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Collections.ObjectModel;

	public partial class Collection : INotifyPropertyChanged
	{
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public Collection()
		{
			Games = new HashSet<Game>();
			Releases = new List<Release>();
		}

		public Collection(IEnumerable<IDBobject> objects) : this()
		{
			foreach (IDBobject idbo in objects)
			{
				if (idbo is Game)
				{
					Games.Add(idbo as Game);
				}

				else if (idbo is Release)
				{
					Releases.Add(idbo as Release);
				}
			}

		}


		private long _iD;
		public long ID
		{
			get { return _iD; }
			set { _iD = value; OnPropertyChanged("ID"); }
		}

		private string _title;
		public string Title
		{
			get { return _title; }
			set { _title = value; OnPropertyChanged("Title"); }
		}

		private string _type;
		public string Type
		{
			get { return _type; }
			set { _type = value; OnPropertyChanged("Type"); }
		}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
		public virtual HashSet<Game> Games { get; set; }
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
		public virtual List<Release> Releases { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}

		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
			{
				WhenPropertyChanged(e);
				PropertyChanged(this, e);
			}
		}

		partial void WhenPropertyChanged(PropertyChangedEventArgs e);

	}
}
