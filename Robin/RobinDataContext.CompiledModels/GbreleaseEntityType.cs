// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class GbreleaseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Gbrelease",
                typeof(Gbrelease),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Gbrelease).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var boxUrl = runtimeEntityType.AddProperty(
                "BoxUrl",
                typeof(string),
                propertyInfo: typeof(Gbrelease).GetProperty("BoxUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<BoxUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            boxUrl.AddAnnotation("Relational:ColumnName", "BoxUrl");

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime?),
                propertyInfo: typeof(Gbrelease).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            date.AddAnnotation("Relational:ColumnType", "DATETIME");

            var gbgameId = runtimeEntityType.AddProperty(
                "GbgameId",
                typeof(long?),
                propertyInfo: typeof(Gbrelease).GetProperty("GbgameId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<GbgameId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            gbgameId.AddAnnotation("Relational:ColumnName", "GBGame_ID");

            var gbplatformId = runtimeEntityType.AddProperty(
                "GbplatformId",
                typeof(long),
                propertyInfo: typeof(Gbrelease).GetProperty("GbplatformId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<GbplatformId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            gbplatformId.AddAnnotation("Relational:ColumnName", "GBPlatform_ID");

            var overview = runtimeEntityType.AddProperty(
                "Overview",
                typeof(string),
                propertyInfo: typeof(Gbrelease).GetProperty("Overview", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Overview>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var players = runtimeEntityType.AddProperty(
                "Players",
                typeof(string),
                propertyInfo: typeof(Gbrelease).GetProperty("Players", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Players>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var regionId = runtimeEntityType.AddProperty(
                "RegionId",
                typeof(long?),
                propertyInfo: typeof(Gbrelease).GetProperty("RegionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<RegionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            regionId.AddAnnotation("Relational:ColumnName", "Region_ID");
            regionId.AddAnnotation("Relational:DefaultValueSql", "0");

            var screenUrl = runtimeEntityType.AddProperty(
                "ScreenUrl",
                typeof(string),
                propertyInfo: typeof(Gbrelease).GetProperty("ScreenUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<ScreenUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            screenUrl.AddAnnotation("Relational:ColumnName", "ScreenUrl");

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(Gbrelease).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { gbgameId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { gbplatformId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { regionId });

            var iX_Gbrelease_ID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_Gbrelease_ID",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GbgameId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var gbgame = declaringEntityType.AddNavigation("Gbgame",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gbgame),
                propertyInfo: typeof(Gbrelease).GetProperty("Gbgame", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Gbgame>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var gbreleases = principalEntityType.AddNavigation("Gbreleases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Gbrelease>),
                propertyInfo: typeof(Gbgame).GetProperty("Gbreleases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbgame).GetField("<Gbreleases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GbplatformId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var gbplatform = declaringEntityType.AddNavigation("Gbplatform",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gbplatform),
                propertyInfo: typeof(Gbrelease).GetProperty("Gbplatform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Gbplatform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var gbreleases = principalEntityType.AddNavigation("Gbreleases",
                runtimeForeignKey,
                onDependent: false,
                typeof(HashSet<Gbrelease>),
                propertyInfo: typeof(Gbplatform).GetProperty("Gbreleases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbplatform).GetField("<Gbreleases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RegionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var region = declaringEntityType.AddNavigation("Region",
                runtimeForeignKey,
                onDependent: true,
                typeof(Region),
                propertyInfo: typeof(Gbrelease).GetProperty("Region", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Region>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var gbreleases = principalEntityType.AddNavigation("Gbreleases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Gbrelease>),
                propertyInfo: typeof(Region).GetProperty("Gbreleases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Region).GetField("<Gbreleases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Gbrelease");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
