// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class GameEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Game",
                typeof(Game),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Game).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var developer = runtimeEntityType.AddProperty(
                "Developer",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Developer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Developer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var genre = runtimeEntityType.AddProperty(
                "Genre",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Genre", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Genre>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var isAdult = runtimeEntityType.AddProperty(
                "IsAdult",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("IsAdult", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("isAdult", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            isAdult.AddAnnotation("Relational:ColumnType", "bit");
            isAdult.AddAnnotation("Relational:DefaultValueSql", "0");

            var isBeaten = runtimeEntityType.AddProperty(
                "IsBeaten",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("IsBeaten", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("isBeaten", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            isBeaten.AddAnnotation("Relational:ColumnType", "bit");
            isBeaten.AddAnnotation("Relational:DefaultValueSql", "0");

            var isCrap = runtimeEntityType.AddProperty(
                "IsCrap",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("IsCrap", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("isCrap", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            isCrap.AddAnnotation("Relational:ColumnType", "bit");
            isCrap.AddAnnotation("Relational:DefaultValueSql", "0");

            var isGame = runtimeEntityType.AddProperty(
                "IsGame",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("IsGame", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("isGame", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            isGame.AddAnnotation("Relational:ColumnType", "bit");
            isGame.AddAnnotation("Relational:DefaultValueSql", "1");

            var isMess = runtimeEntityType.AddProperty(
                "IsMess",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("IsMess", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("isMess", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            isMess.AddAnnotation("Relational:ColumnType", "bit");
            isMess.AddAnnotation("Relational:DefaultValueSql", "0");

            var overview = runtimeEntityType.AddProperty(
                "Overview",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Overview", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Overview>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var players = runtimeEntityType.AddProperty(
                "Players",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Players", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Players>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var publisher = runtimeEntityType.AddProperty(
                "Publisher",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Publisher", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Publisher>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var rating = runtimeEntityType.AddProperty(
                "Rating",
                typeof(double?),
                propertyInfo: typeof(Game).GetProperty("Rating", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("rating", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rating.AddAnnotation("Relational:ColumnType", "NUMERIC");

            var unlicensed = runtimeEntityType.AddProperty(
                "Unlicensed",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("Unlicensed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Unlicensed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            unlicensed.AddAnnotation("Relational:ColumnType", "bit");
            unlicensed.AddAnnotation("Relational:DefaultValueSql", "0");

            var videoFormat = runtimeEntityType.AddProperty(
                "VideoFormat",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("VideoFormat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<VideoFormat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var gID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "GID");

            var iX_Game_ID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_Game_ID",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                "Collections",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty("GameId") },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
                    declaringEntityType),
                true,
                false,
                typeof(ICollection<Collection>),
                propertyInfo: typeof(Game).GetProperty("Collections", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Collections>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverse = targetEntityType.FindSkipNavigation("Games");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Game");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
