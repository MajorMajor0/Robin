// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class ReleaseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Release",
                typeof(Release),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Release).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime?),
                propertyInfo: typeof(Release).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            date.AddAnnotation("Relational:ColumnType", "DATETIME");

            var gameId = runtimeEntityType.AddProperty(
                "GameId",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("GameId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<GameId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            gameId.AddAnnotation("Relational:ColumnName", "Game_ID");

            var iD_GB = runtimeEntityType.AddProperty(
                "ID_GB",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("ID_GB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<ID_GB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_GB.AddAnnotation("Relational:ColumnName", "ID_GB");

            var iD_GDB = runtimeEntityType.AddProperty(
                "ID_GDB",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("ID_GDB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<ID_GDB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_GDB.AddAnnotation("Relational:ColumnName", "ID_GDB");

            var iD_LB = runtimeEntityType.AddProperty(
                "ID_LB",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("ID_LB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<ID_LB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_LB.AddAnnotation("Relational:ColumnName", "ID_LB");

            var iD_LBG = runtimeEntityType.AddProperty(
                "ID_LBG",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("ID_LBG", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<ID_LBG>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_LBG.AddAnnotation("Relational:ColumnName", "ID_LBG");

            var iD_OVG = runtimeEntityType.AddProperty(
                "ID_OVG",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("ID_OVG", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<ID_OVG>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_OVG.AddAnnotation("Relational:ColumnName", "ID_OVG");

            var language = runtimeEntityType.AddProperty(
                "Language",
                typeof(string),
                propertyInfo: typeof(Release).GetProperty("Language", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Language>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var platformId = runtimeEntityType.AddProperty(
                "PlatformId",
                typeof(long),
                propertyInfo: typeof(Release).GetProperty("PlatformId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<PlatformId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            platformId.AddAnnotation("Relational:ColumnName", "Platform_ID");

            var playCount = runtimeEntityType.AddProperty(
                "PlayCount",
                typeof(long),
                propertyInfo: typeof(Release).GetProperty("PlayCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<PlayCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var preferred = runtimeEntityType.AddProperty(
                "Preferred",
                typeof(bool),
                propertyInfo: typeof(Release).GetProperty("Preferred", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("preferred", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            preferred.AddAnnotation("Relational:ColumnType", "bit");
            preferred.AddAnnotation("Relational:DefaultValueSql", "0");

            var regionId = runtimeEntityType.AddProperty(
                "RegionId",
                typeof(long),
                propertyInfo: typeof(Release).GetProperty("RegionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<RegionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            regionId.AddAnnotation("Relational:ColumnName", "Region_ID");

            var romId = runtimeEntityType.AddProperty(
                "RomId",
                typeof(long?),
                propertyInfo: typeof(Release).GetProperty("RomId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<RomId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            romId.AddAnnotation("Relational:ColumnName", "Rom_ID");

            var special = runtimeEntityType.AddProperty(
                "Special",
                typeof(string),
                propertyInfo: typeof(Release).GetProperty("Special", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Special>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(Release).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var version = runtimeEntityType.AddProperty(
                "Version",
                typeof(string),
                propertyInfo: typeof(Release).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { gameId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { iD_GB });

            var index1 = runtimeEntityType.AddIndex(
                new[] { iD_GDB });

            var index2 = runtimeEntityType.AddIndex(
                new[] { iD_LB });

            var index3 = runtimeEntityType.AddIndex(
                new[] { iD_LBG });

            var index4 = runtimeEntityType.AddIndex(
                new[] { iD_OVG });

            var index5 = runtimeEntityType.AddIndex(
                new[] { platformId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { regionId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { romId });

            var iX_Release_ID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_Release_ID",
                unique: true);

            var rID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "RID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GameId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade);

            var game = declaringEntityType.AddNavigation("Game",
                runtimeForeignKey,
                onDependent: true,
                typeof(Game),
                propertyInfo: typeof(Release).GetProperty("Game", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Game>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<Release>),
                propertyInfo: typeof(Game).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_GB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var gbrelease = declaringEntityType.AddNavigation("Gbrelease",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gbrelease),
                propertyInfo: typeof(Release).GetProperty("Gbrelease", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Gbrelease>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Gbrelease).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbrelease).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_GDB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var gdbrelease = declaringEntityType.AddNavigation("Gdbrelease",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gdbrelease),
                propertyInfo: typeof(Release).GetProperty("Gdbrelease", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Gdbrelease>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Gdbrelease).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gdbrelease).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_LB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var lbrelease = declaringEntityType.AddNavigation("Lbrelease",
                runtimeForeignKey,
                onDependent: true,
                typeof(Lbrelease),
                propertyInfo: typeof(Release).GetProperty("Lbrelease", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Lbrelease>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Lbrelease).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Lbrelease).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_LBG") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var lbgame = declaringEntityType.AddNavigation("Lbgame",
                runtimeForeignKey,
                onDependent: true,
                typeof(Lbgame),
                propertyInfo: typeof(Release).GetProperty("Lbgame", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Lbgame>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Lbgame).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Lbgame).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_OVG") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull);

            var ovgrelease = declaringEntityType.AddNavigation("Ovgrelease",
                runtimeForeignKey,
                onDependent: true,
                typeof(Ovgrelease),
                propertyInfo: typeof(Release).GetProperty("Ovgrelease", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Ovgrelease>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Ovgrelease).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Ovgrelease).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlatformId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var platform = declaringEntityType.AddNavigation("Platform",
                runtimeForeignKey,
                onDependent: true,
                typeof(Platform),
                propertyInfo: typeof(Release).GetProperty("Platform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Platform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Release>),
                propertyInfo: typeof(Platform).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RegionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var region = declaringEntityType.AddNavigation("Region",
                runtimeForeignKey,
                onDependent: true,
                typeof(Region),
                propertyInfo: typeof(Release).GetProperty("Region", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Region>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Release>),
                propertyInfo: typeof(Region).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Region).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RomId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade);

            var rom = declaringEntityType.AddNavigation("Rom",
                runtimeForeignKey,
                onDependent: true,
                typeof(Rom),
                propertyInfo: typeof(Release).GetProperty("Rom", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Rom>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var releases = principalEntityType.AddNavigation("Releases",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<Release>),
                propertyInfo: typeof(Rom).GetProperty("Releases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Rom).GetField("<Releases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                "Collections",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty("ReleaseId") },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
                    declaringEntityType),
                true,
                false,
                typeof(ICollection<Collection>),
                propertyInfo: typeof(Release).GetProperty("Collections", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Release).GetField("<Collections>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverse = targetEntityType.FindSkipNavigation("Releases");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Release");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
