// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class PlatformEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Platform",
                typeof(Platform),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Platform).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var abbreviation = runtimeEntityType.AddProperty(
                "Abbreviation",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Abbreviation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Abbreviation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cacheDate = runtimeEntityType.AddProperty(
                "CacheDate",
                typeof(DateTime),
                propertyInfo: typeof(Platform).GetProperty("CacheDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<CacheDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            cacheDate.AddAnnotation("Relational:ColumnType", "DATETIME");
            cacheDate.AddAnnotation("Relational:DefaultValueSql", "1900 - 1 - 1 - 0 - 0 - 0");

            var controllers = runtimeEntityType.AddProperty(
                "Controllers",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Controllers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Controllers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cpu = runtimeEntityType.AddProperty(
                "Cpu",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Cpu", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Cpu>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime?),
                propertyInfo: typeof(Platform).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            date.AddAnnotation("Relational:ColumnType", "DATETIME");
            date.AddAnnotation("Relational:DefaultValueSql", "0");

            var developer = runtimeEntityType.AddProperty(
                "Developer",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Developer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Developer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var display = runtimeEntityType.AddProperty(
                "Display",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Display", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Display>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var fileName = runtimeEntityType.AddProperty(
                "FileName",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("FileName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<FileName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var generation = runtimeEntityType.AddProperty(
                "Generation",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Generation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Generation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var headerLength = runtimeEntityType.AddProperty(
                "HeaderLength",
                typeof(long),
                propertyInfo: typeof(Platform).GetProperty("HeaderLength", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<HeaderLength>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var higanExtension = runtimeEntityType.AddProperty(
                "HiganExtension",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("HiganExtension", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<HiganExtension>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            higanExtension.AddAnnotation("Relational:ColumnType", "STRING");

            var higanRomFolder = runtimeEntityType.AddProperty(
                "HiganRomFolder",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("HiganRomFolder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<HiganRomFolder>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var iD_GB = runtimeEntityType.AddProperty(
                "ID_GB",
                typeof(long?),
                propertyInfo: typeof(Platform).GetProperty("ID_GB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<ID_GB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_GB.AddAnnotation("Relational:ColumnName", "ID_GB");

            var iD_GDB = runtimeEntityType.AddProperty(
                "ID_GDB",
                typeof(long?),
                propertyInfo: typeof(Platform).GetProperty("ID_GDB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<ID_GDB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_GDB.AddAnnotation("Relational:ColumnName", "ID_GDB");

            var iD_LB = runtimeEntityType.AddProperty(
                "ID_LB",
                typeof(long?),
                propertyInfo: typeof(Platform).GetProperty("ID_LB", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<ID_LB>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            iD_LB.AddAnnotation("Relational:ColumnName", "ID_LB");

            var lastDate = runtimeEntityType.AddProperty(
                "LastDate",
                typeof(byte[]),
                propertyInfo: typeof(Platform).GetProperty("LastDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<LastDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            lastDate.AddAnnotation("Relational:ColumnType", "DATETIME");
            lastDate.AddAnnotation("Relational:DefaultValueSql", "1900 - 1 - 1 - 0 - 0 - 0");

            var manufacturer = runtimeEntityType.AddProperty(
                "Manufacturer",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Manufacturer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Manufacturer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var media = runtimeEntityType.AddProperty(
                "Media",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Media", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Media>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var overview = runtimeEntityType.AddProperty(
                "Overview",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Overview", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Overview>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var preferred = runtimeEntityType.AddProperty(
                "Preferred",
                typeof(bool),
                propertyInfo: typeof(Platform).GetProperty("Preferred", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("preferred", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            preferred.AddAnnotation("Relational:ColumnType", "bit");
            preferred.AddAnnotation("Relational:DefaultValueSql", "0");

            var preferredEmulatorId = runtimeEntityType.AddProperty(
                "PreferredEmulatorId",
                typeof(long),
                propertyInfo: typeof(Platform).GetProperty("PreferredEmulatorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("preferredEmulatorId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            preferredEmulatorId.AddAnnotation("Relational:ColumnName", "PreferredEmulator_ID");
            preferredEmulatorId.AddAnnotation("Relational:DefaultValueSql", "7");

            var rating = runtimeEntityType.AddProperty(
                "Rating",
                typeof(byte[]),
                propertyInfo: typeof(Platform).GetProperty("Rating", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Rating>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            rating.AddAnnotation("Relational:ColumnType", "NUMERIC");
            rating.AddAnnotation("Relational:DefaultValueSql", "0");

            var sound = runtimeEntityType.AddProperty(
                "Sound",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Sound", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Sound>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(string),
                propertyInfo: typeof(Platform).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { preferredEmulatorId });

            var iX_PlatformID_GB = runtimeEntityType.AddIndex(
                new[] { iD_GB },
                name: "IX_PlatformID_GB",
                unique: true);

            var iX_PlatformID_GDB = runtimeEntityType.AddIndex(
                new[] { iD_GDB },
                name: "IX_PlatformID_GDB",
                unique: true);

            var iX_PlatformID_LB = runtimeEntityType.AddIndex(
                new[] { iD_LB },
                name: "IX_PlatformID_LB",
                unique: true);

            var iX_PlatformId = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_PlatformId",
                unique: true);

            var iX_Platform_Abbreviation = runtimeEntityType.AddIndex(
                new[] { abbreviation },
                name: "IX_Platform_Abbreviation",
                unique: true);

            var iX_Platform_FileName = runtimeEntityType.AddIndex(
                new[] { fileName },
                name: "IX_Platform_FileName",
                unique: true);

            var iX_Platform_HiganRomFolder = runtimeEntityType.AddIndex(
                new[] { higanRomFolder },
                name: "IX_Platform_HiganRomFolder",
                unique: true);

            var iX_Platform_Title = runtimeEntityType.AddIndex(
                new[] { title },
                name: "IX_Platform_Title",
                unique: true);

            var pID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "PID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_GB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            var gbplatform = declaringEntityType.AddNavigation("Gbplatform",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gbplatform),
                propertyInfo: typeof(Platform).GetProperty("Gbplatform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Gbplatform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var platform = principalEntityType.AddNavigation("Platform",
                runtimeForeignKey,
                onDependent: false,
                typeof(Platform),
                propertyInfo: typeof(Gbplatform).GetProperty("Platform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gbplatform).GetField("<Platform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_GDB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            var gdbplatform = declaringEntityType.AddNavigation("Gdbplatform",
                runtimeForeignKey,
                onDependent: true,
                typeof(Gdbplatform),
                propertyInfo: typeof(Platform).GetProperty("Gdbplatform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Gdbplatform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var platform = principalEntityType.AddNavigation("Platform",
                runtimeForeignKey,
                onDependent: false,
                typeof(Platform),
                propertyInfo: typeof(Gdbplatform).GetProperty("Platform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Gdbplatform).GetField("<Platform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ID_LB") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            var lbplatform = declaringEntityType.AddNavigation("Lbplatform",
                runtimeForeignKey,
                onDependent: true,
                typeof(Lbplatform),
                propertyInfo: typeof(Platform).GetProperty("Lbplatform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Lbplatform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var platform = principalEntityType.AddNavigation("Platform",
                runtimeForeignKey,
                onDependent: false,
                typeof(Platform),
                propertyInfo: typeof(Lbplatform).GetProperty("Platform", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Lbplatform).GetField("<Platform>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PreferredEmulatorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var preferredEmulator = declaringEntityType.AddNavigation("PreferredEmulator",
                runtimeForeignKey,
                onDependent: true,
                typeof(Emulator),
                propertyInfo: typeof(Platform).GetProperty("PreferredEmulator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<PreferredEmulator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var platforms1 = principalEntityType.AddNavigation("Platforms1",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Platform>),
                propertyInfo: typeof(Emulator).GetProperty("Platforms1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Emulator).GetField("<Platforms1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                "Cores",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty("PlatformId") },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
                    declaringEntityType),
                true,
                false,
                typeof(IList<Core>),
                propertyInfo: typeof(Platform).GetProperty("Cores", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Cores>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverse = targetEntityType.FindSkipNavigation("Platforms");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation2(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                "Emulators",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty("Platform_ID") },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
                    declaringEntityType),
                true,
                false,
                typeof(ICollection<Emulator>),
                propertyInfo: typeof(Platform).GetProperty("Emulators", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Platform).GetField("<Emulators>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverse = targetEntityType.FindSkipNavigation("Platforms");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Platform");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
