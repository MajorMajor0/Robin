// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class UrlEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Url",
                typeof(Url),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Url).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var banner = runtimeEntityType.AddProperty(
                "Banner",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Banner", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Banner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var box3D = runtimeEntityType.AddProperty(
                "Box3D",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Box3D", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Box3D>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var boxBack = runtimeEntityType.AddProperty(
                "BoxBack",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("BoxBack", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<BoxBack>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var boxFront = runtimeEntityType.AddProperty(
                "BoxFront",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("BoxFront", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<BoxFront>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cartridge = runtimeEntityType.AddProperty(
                "Cartridge",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Cartridge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Cartridge>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cartridge3D = runtimeEntityType.AddProperty(
                "Cartridge3D",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Cartridge3D", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Cartridge3D>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var controlPanel = runtimeEntityType.AddProperty(
                "ControlPanel",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("ControlPanel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<ControlPanel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var logo = runtimeEntityType.AddProperty(
                "Logo",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Logo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Logo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var marquee = runtimeEntityType.AddProperty(
                "Marquee",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Marquee", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Marquee>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var screen = runtimeEntityType.AddProperty(
                "Screen",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Screen", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Screen>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var video = runtimeEntityType.AddProperty(
                "Video",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Video", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Video>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var wiki = runtimeEntityType.AddProperty(
                "Wiki",
                typeof(string),
                propertyInfo: typeof(Url).GetProperty("Wiki", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Url).GetField("<Wiki>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var iX_URL_ID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_URL_ID",
                unique: true);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "URL");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
