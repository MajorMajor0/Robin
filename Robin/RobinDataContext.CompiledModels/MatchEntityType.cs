// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin
{
    internal partial class MatchEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Robin.Match",
                typeof(Match),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Match).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "ID");

            var idGb = runtimeEntityType.AddProperty(
                "IdGb",
                typeof(long?),
                propertyInfo: typeof(Match).GetProperty("IdGb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<IdGb>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            idGb.AddAnnotation("Relational:ColumnName", "ID_GB");

            var idGdb = runtimeEntityType.AddProperty(
                "IdGdb",
                typeof(long?),
                propertyInfo: typeof(Match).GetProperty("IdGdb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<IdGdb>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            idGdb.AddAnnotation("Relational:ColumnName", "ID_GDB");

            var idOvg = runtimeEntityType.AddProperty(
                "IdOvg",
                typeof(long?),
                propertyInfo: typeof(Match).GetProperty("IdOvg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<IdOvg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            idOvg.AddAnnotation("Relational:ColumnName", "ID_OVG");

            var regionId = runtimeEntityType.AddProperty(
                "RegionId",
                typeof(long?),
                propertyInfo: typeof(Match).GetProperty("RegionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<RegionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            regionId.AddAnnotation("Relational:ColumnName", "Region_ID");
            regionId.AddAnnotation("Relational:DefaultValueSql", "0");

            var sha1 = runtimeEntityType.AddProperty(
                "Sha1",
                typeof(string),
                propertyInfo: typeof(Match).GetProperty("Sha1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Match).GetField("<Sha1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            sha1.AddAnnotation("Relational:ColumnName", "Sha1");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var iX_Match_ID = runtimeEntityType.AddIndex(
                new[] { id },
                name: "IX_Match_ID",
                unique: true);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Match");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
