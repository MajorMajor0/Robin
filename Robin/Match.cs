//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Robin
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Collections.ObjectModel;
    
    public partial class Match : INotifyPropertyChanged
    {
        private long _iD;
    	public long ID 
    	{ 
    		get { return _iD; } 
    		set { _iD = value; OnPropertyChanged("ID"); } 
    	}
    
        private Nullable<long> _iD_GB;
    	public Nullable<long> ID_GB 
    	{ 
    		get { return _iD_GB; } 
    		set { _iD_GB = value; OnPropertyChanged("ID_GB"); } 
    	}
    
        private Nullable<long> _iD_GDB;
    	public Nullable<long> ID_GDB 
    	{ 
    		get { return _iD_GDB; } 
    		set { _iD_GDB = value; OnPropertyChanged("ID_GDB"); } 
    	}
    
        private Nullable<long> _iD_OVG;
    	public Nullable<long> ID_OVG 
    	{ 
    		get { return _iD_OVG; } 
    		set { _iD_OVG = value; OnPropertyChanged("ID_OVG"); } 
    	}
    
        private string _sHA1;
    	public string SHA1 
    	{ 
    		get { return _sHA1; } 
    		set { _sHA1 = value; OnPropertyChanged("SHA1"); } 
    	}
    
        private Nullable<long> _region_ID;
    	public Nullable<long> Region_ID 
    	{ 
    		get { return _region_ID; } 
    		set { _region_ID = value; OnPropertyChanged("Region_ID"); } 
    	}
    
    
        public virtual Region Region { get; set; }
     
        public event PropertyChangedEventHandler PropertyChanged;
    
        protected void OnPropertyChanged(string propertyName)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }
    	
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            if (PropertyChanged != null)
            {
                WhenPropertyChanged(e);
                PropertyChanged(this, e);
            }
        }
    
        partial void WhenPropertyChanged(PropertyChangedEventArgs e);
        
    }
}
