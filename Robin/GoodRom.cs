//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Robin
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Collections.ObjectModel;
    
    public partial class GoodRom : INotifyPropertyChanged
    {
        private long _iD;
    	public long ID 
    	{ 
    		get { return _iD; } 
    		set { _iD = value; OnPropertyChanged("ID"); } 
    	}
    
        private Nullable<bool> _alternate;
    	public Nullable<bool> Alternate 
    	{ 
    		get { return _alternate; } 
    		set { _alternate = value; OnPropertyChanged("Alternate"); } 
    	}
    
        private Nullable<bool> _pirate;
    	public Nullable<bool> Pirate 
    	{ 
    		get { return _pirate; } 
    		set { _pirate = value; OnPropertyChanged("Pirate"); } 
    	}
    
        private Nullable<bool> _translation;
    	public Nullable<bool> Translation 
    	{ 
    		get { return _translation; } 
    		set { _translation = value; OnPropertyChanged("Translation"); } 
    	}
    
        private Nullable<bool> _fixed;
    	public Nullable<bool> Fixed 
    	{ 
    		get { return _fixed; } 
    		set { _fixed = value; OnPropertyChanged("Fixed"); } 
    	}
    
        private Nullable<bool> _badDump;
    	public Nullable<bool> BadDump 
    	{ 
    		get { return _badDump; } 
    		set { _badDump = value; OnPropertyChanged("BadDump"); } 
    	}
    
        private Nullable<bool> _hack;
    	public Nullable<bool> Hack 
    	{ 
    		get { return _hack; } 
    		set { _hack = value; OnPropertyChanged("Hack"); } 
    	}
    
        private Nullable<bool> _unknownYear;
    	public Nullable<bool> UnknownYear 
    	{ 
    		get { return _unknownYear; } 
    		set { _unknownYear = value; OnPropertyChanged("UnknownYear"); } 
    	}
    
        private Nullable<bool> _trained;
    	public Nullable<bool> Trained 
    	{ 
    		get { return _trained; } 
    		set { _trained = value; OnPropertyChanged("Trained"); } 
    	}
    
        private Nullable<bool> _overdump;
    	public Nullable<bool> Overdump 
    	{ 
    		get { return _overdump; } 
    		set { _overdump = value; OnPropertyChanged("Overdump"); } 
    	}
    
        private Nullable<bool> _verifiedGoodDump;
    	public Nullable<bool> VerifiedGoodDump 
    	{ 
    		get { return _verifiedGoodDump; } 
    		set { _verifiedGoodDump = value; OnPropertyChanged("VerifiedGoodDump"); } 
    	}
    
        private Nullable<bool> _multilanguage;
    	public Nullable<bool> Multilanguage 
    	{ 
    		get { return _multilanguage; } 
    		set { _multilanguage = value; OnPropertyChanged("Multilanguage"); } 
    	}
    
        private Nullable<bool> _unclassified;
    	public Nullable<bool> Unclassified 
    	{ 
    		get { return _unclassified; } 
    		set { _unclassified = value; OnPropertyChanged("Unclassified"); } 
    	}
    
        private Nullable<bool> _vS;
    	public Nullable<bool> VS 
    	{ 
    		get { return _vS; } 
    		set { _vS = value; OnPropertyChanged("VS"); } 
    	}
    
        private Nullable<bool> _pC10;
    	public Nullable<bool> PC10 
    	{ 
    		get { return _pC10; } 
    		set { _pC10 = value; OnPropertyChanged("PC10"); } 
    	}
    
        private Nullable<bool> _unlicensed;
    	public Nullable<bool> Unlicensed 
    	{ 
    		get { return _unlicensed; } 
    		set { _unlicensed = value; OnPropertyChanged("Unlicensed"); } 
    	}
    
     
        public event PropertyChangedEventHandler PropertyChanged;
    
        protected void OnPropertyChanged(string propertyName)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }
    	
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            if (PropertyChanged != null)
            {
                WhenPropertyChanged(e);
                PropertyChanged(this, e);
            }
        }
    
        partial void WhenPropertyChanged(PropertyChangedEventArgs e);
        
    }
}
