//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Robin
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Collections.ObjectModel;
    
    public partial class Platform : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Platform()
        {
    		Releases = new List<Release>();
    		Emulators = new List<Emulator>();
        }
    
        private long _iD;
    	public long ID 
    	{ 
    		get { return _iD; } 
    		set { _iD = value; OnPropertyChanged("ID"); } 
    	}
    
        private string _title;
    	public string Title 
    	{ 
    		get { return _title; } 
    		set { _title = value; OnPropertyChanged("Title"); } 
    	}
    
        private Nullable<long> _iD_GDB;
    	public Nullable<long> ID_GDB 
    	{ 
    		get { return _iD_GDB; } 
    		set { _iD_GDB = value; OnPropertyChanged("ID_GDB"); } 
    	}
    
        private Nullable<long> _iD_GB;
    	public Nullable<long> ID_GB 
    	{ 
    		get { return _iD_GB; } 
    		set { _iD_GB = value; OnPropertyChanged("ID_GB"); } 
    	}
    
        private Nullable<long> _iD_LB;
    	public Nullable<long> ID_LB 
    	{ 
    		get { return _iD_LB; } 
    		set { _iD_LB = value; OnPropertyChanged("ID_LB"); } 
    	}
    
        private long _preferredEmulator_ID;
    	public long PreferredEmulator_ID 
    	{ 
    		get { return _preferredEmulator_ID; } 
    		set { _preferredEmulator_ID = value; OnPropertyChanged("PreferredEmulator_ID"); } 
    	}
    
        private string _manufacturer;
    	public string Manufacturer 
    	{ 
    		get { return _manufacturer; } 
    		set { _manufacturer = value; OnPropertyChanged("Manufacturer"); } 
    	}
    
        /* private bool _preferred;
     	public bool Preferred 
     	{ 
    		get { return _preferred; } 
    		set { _preferred = value; OnPropertyChanged("Preferred"); } 
    	}
    */
        private string _higanRomFolder;
    	public string HiganRomFolder 
    	{ 
    		get { return _higanRomFolder; } 
    		set { _higanRomFolder = value; OnPropertyChanged("HiganRomFolder"); } 
    	}
    
        private string _higanExtension;
    	public string HiganExtension 
    	{ 
    		get { return _higanExtension; } 
    		set { _higanExtension = value; OnPropertyChanged("HiganExtension"); } 
    	}
    
        private long _headerLength;
    	public long HeaderLength 
    	{ 
    		get { return _headerLength; } 
    		set { _headerLength = value; OnPropertyChanged("HeaderLength"); } 
    	}
    
        private string _generation;
    	public string Generation 
    	{ 
    		get { return _generation; } 
    		set { _generation = value; OnPropertyChanged("Generation"); } 
    	}
    
        private string _type;
    	public string Type 
    	{ 
    		get { return _type; } 
    		set { _type = value; OnPropertyChanged("Type"); } 
    	}
    
        private Nullable<System.DateTime> _date;
    	public Nullable<System.DateTime> Date 
    	{ 
    		get { return _date; } 
    		set { _date = value; OnPropertyChanged("Date"); } 
    	}
    
        private string _fileName;
    	public string FileName 
    	{ 
    		get { return _fileName; } 
    		set 
    		{
    			_fileName = value;
    			OnPropertyChanged("FileName");
    			OnPropertyChanged("FilePath");
    		} 
    	}
    
        private string _abbreviation;
    	public string Abbreviation 
    	{ 
    		get { return _abbreviation; } 
    		set { _abbreviation = value; OnPropertyChanged("Abbreviation"); } 
    	}
    
        private string _developer;
    	public string Developer 
    	{ 
    		get { return _developer; } 
    		set { _developer = value; OnPropertyChanged("Developer"); } 
    	}
    
        private string _cpu;
    	public string Cpu 
    	{ 
    		get { return _cpu; } 
    		set { _cpu = value; OnPropertyChanged("Cpu"); } 
    	}
    
        private string _sound;
    	public string Sound 
    	{ 
    		get { return _sound; } 
    		set { _sound = value; OnPropertyChanged("Sound"); } 
    	}
    
        private string _display;
    	public string Display 
    	{ 
    		get { return _display; } 
    		set { _display = value; OnPropertyChanged("Display"); } 
    	}
    
        private string _media;
    	public string Media 
    	{ 
    		get { return _media; } 
    		set { _media = value; OnPropertyChanged("Media"); } 
    	}
    
        private string _controllers;
    	public string Controllers 
    	{ 
    		get { return _controllers; } 
    		set { _controllers = value; OnPropertyChanged("Controllers"); } 
    	}
    
        private decimal _rating;
    	public decimal Rating 
    	{ 
    		get { return _rating; } 
    		set { _rating = value; OnPropertyChanged("Rating"); } 
    	}
    
        private string _overview;
    	public string Overview 
    	{ 
    		get { return _overview; } 
    		set { _overview = value; OnPropertyChanged("Overview"); } 
    	}
    
        private System.DateTime _cacheDate;
    	public System.DateTime CacheDate 
    	{ 
    		get { return _cacheDate; } 
    		set { _cacheDate = value; OnPropertyChanged("CacheDate"); } 
    	}
    
    
        public virtual Emulator Emulator { get; set; }
        public virtual GBPlatform GBPlatform { get; set; }
        public virtual GDBPlatform GDBPlatform { get; set; }
        public virtual LBPlatform LBPlatform { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual List<Release> Releases { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual List<Emulator> Emulators { get; set; }
     
        public event PropertyChangedEventHandler PropertyChanged;
    
        protected void OnPropertyChanged(string propertyName)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }
    	
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            if (PropertyChanged != null)
            {
                WhenPropertyChanged(e);
                PropertyChanged(this, e);
            }
        }
    
        partial void WhenPropertyChanged(PropertyChangedEventArgs e);
        
    }
}
